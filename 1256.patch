From 6bc3ddf56f16b1f9a4f5effef6526fad7bbd9c28 Mon Sep 17 00:00:00 2001
From: Yuan Zhou <yuan.zhou@intel.com>
Date: Thu, 30 Apr 2020 14:37:28 +0800
Subject: [PATCH] [Scala] adding IsNull support

Signed-off-by: Yuan Zhou <yuan.zhou@intel.com>
---
 .../expression/ColumnarUnaryOperator.scala      | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/oap-native-sql/core/src/main/scala/com/intel/sparkColumnarPlugin/expression/ColumnarUnaryOperator.scala b/oap-native-sql/core/src/main/scala/com/intel/sparkColumnarPlugin/expression/ColumnarUnaryOperator.scala
index c99abdca5e..0fe2fcca0a 100644
--- a/oap-native-sql/core/src/main/scala/com/intel/sparkColumnarPlugin/expression/ColumnarUnaryOperator.scala
+++ b/oap-native-sql/core/src/main/scala/com/intel/sparkColumnarPlugin/expression/ColumnarUnaryOperator.scala
@@ -34,6 +34,21 @@ class ColumnarIsNotNull(child: Expression, original: Expression)
   }
 }
 
+class ColumnarIsNull(child: Expression, original: Expression)
+    extends IsNotNull(child: Expression)
+    with ColumnarExpression
+    with Logging {
+  override def doColumnarCodeGen(args: java.lang.Object): (TreeNode, ArrowType) = {
+    val (child_node, childType): (TreeNode, ArrowType) =
+      child.asInstanceOf[ColumnarExpression].doColumnarCodeGen(args)
+
+    val resultType = new ArrowType.Bool()
+    val funcNode =
+      TreeBuilder.makeFunction("isnull", Lists.newArrayList(child_node), resultType)
+    (funcNode, resultType)
+  }
+}
+
 class ColumnarYear(child: Expression, original: Expression)
     extends Year(child: Expression)
     with ColumnarExpression
@@ -72,6 +87,8 @@ class ColumnarNot(child: Expression, original: Expression)
 object ColumnarUnaryOperator {
 
   def create(child: Expression, original: Expression): Expression = original match {
+    case in: IsNull =>
+      new ColumnarIsNull(child, in)
     case i: IsNotNull =>
       new ColumnarIsNotNull(child, i)
     case y: Year =>
